/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


	#include "include/kovan/export.hpp"
	#include "include/kovan/port.hpp"
	#include "include/kovan/kovan.hpp"
	#include "include/kovan/geom.hpp"
	#include "include/kovan/color.hpp"
	#include "include/kovan/config.hpp"
	#include <cstring>
	#include <string>
	#include <vector>
	#include <map>
	#include <iostream>
	#include <opencv2/core/core.hpp>
	#include <cstdio>
	#include <cstdlib>
	#include <time.h>
	#include <winsock2.h>


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_delete_1IntSensor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Sensor< int > *arg1 = (Sensor< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Sensor< int > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_IntSensor_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Sensor< int > *arg1 = (Sensor< int > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Sensor< int > **)&jarg1; 
  result = (int)((Sensor< int > const *)arg1)->value();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_delete_1UnsingnedShortSensor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Sensor< unsigned short > *arg1 = (Sensor< unsigned short > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Sensor< unsigned short > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_UnsingnedShortSensor_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Sensor< unsigned short > *arg1 = (Sensor< unsigned short > *) 0 ;
  unsigned short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Sensor< unsigned short > **)&jarg1; 
  result = (unsigned short)((Sensor< unsigned short > const *)arg1)->value();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_delete_1ShortSensor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Sensor< short > *arg1 = (Sensor< short > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Sensor< short > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jshort JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_ShortSensor_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  Sensor< short > *arg1 = (Sensor< short > *) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Sensor< short > **)&jarg1; 
  result = (short)((Sensor< short > const *)arg1)->value();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_delete_1BoolSensor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Sensor< bool > *arg1 = (Sensor< bool > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Sensor< bool > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_BoolSensor_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Sensor< bool > *arg1 = (Sensor< bool > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Sensor< bool > **)&jarg1; 
  result = (bool)((Sensor< bool > const *)arg1)->value();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_delete_1UnsignedCharSensor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Sensor< unsigned char > *arg1 = (Sensor< unsigned char > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Sensor< unsigned char > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jshort JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_UnsignedCharSensor_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  Sensor< unsigned char > *arg1 = (Sensor< unsigned char > *) 0 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Sensor< unsigned char > **)&jarg1; 
  result = (unsigned char)((Sensor< unsigned char > const *)arg1)->value();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_delete_1CharSensor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Sensor< char > *arg1 = (Sensor< char > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Sensor< char > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jchar JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_CharSensor_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  Sensor< char > *arg1 = (Sensor< char > *) 0 ;
  char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Sensor< char > **)&jarg1; 
  result = (char)((Sensor< char > const *)arg1)->value();
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_new_1Motor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  port_t *arg1 = 0 ;
  Motor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(port_t **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "port_t const & reference is null");
    return 0;
  } 
  result = (Motor *)new Motor((port_t const &)*arg1);
  *(Motor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Motor_1clearPositionCounter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Motor *arg1 = (Motor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Motor **)&jarg1; 
  (arg1)->clearPositionCounter();
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Motor_1moveAtVelocity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  Motor *arg1 = (Motor *) 0 ;
  short *arg2 = 0 ;
  short temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Motor **)&jarg1; 
  temp2 = (short)jarg2; 
  arg2 = &temp2; 
  (arg1)->moveAtVelocity((short const &)*arg2);
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Motor_1moveToPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jint jarg3) {
  Motor *arg1 = (Motor *) 0 ;
  short *arg2 = 0 ;
  int *arg3 = 0 ;
  short temp2 ;
  int temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Motor **)&jarg1; 
  temp2 = (short)jarg2; 
  arg2 = &temp2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  (arg1)->moveToPosition((short const &)*arg2,(int const &)*arg3);
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Motor_1moveRelativePosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jint jarg3) {
  Motor *arg1 = (Motor *) 0 ;
  short *arg2 = 0 ;
  int *arg3 = 0 ;
  short temp2 ;
  int temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Motor **)&jarg1; 
  temp2 = (short)jarg2; 
  arg2 = &temp2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  (arg1)->moveRelativePosition((short const &)*arg2,(int const &)*arg3);
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Motor_1setPidGains(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jshort jarg3, jshort jarg4, jshort jarg5, jshort jarg6, jshort jarg7) {
  Motor *arg1 = (Motor *) 0 ;
  short *arg2 = 0 ;
  short *arg3 = 0 ;
  short *arg4 = 0 ;
  short *arg5 = 0 ;
  short *arg6 = 0 ;
  short *arg7 = 0 ;
  short temp2 ;
  short temp3 ;
  short temp4 ;
  short temp5 ;
  short temp6 ;
  short temp7 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Motor **)&jarg1; 
  temp2 = (short)jarg2; 
  arg2 = &temp2; 
  temp3 = (short)jarg3; 
  arg3 = &temp3; 
  temp4 = (short)jarg4; 
  arg4 = &temp4; 
  temp5 = (short)jarg5; 
  arg5 = &temp5; 
  temp6 = (short)jarg6; 
  arg6 = &temp6; 
  temp7 = (short)jarg7; 
  arg7 = &temp7; 
  (arg1)->setPidGains((short const &)*arg2,(short const &)*arg3,(short const &)*arg4,(short const &)*arg5,(short const &)*arg6,(short const &)*arg7);
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Motor_1pidGains(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  Motor *arg1 = (Motor *) 0 ;
  short *arg2 = 0 ;
  short *arg3 = 0 ;
  short *arg4 = 0 ;
  short *arg5 = 0 ;
  short *arg6 = 0 ;
  short *arg7 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Motor **)&jarg1; 
  arg2 = *(short **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "short & reference is null");
    return ;
  } 
  arg3 = *(short **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "short & reference is null");
    return ;
  } 
  arg4 = *(short **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "short & reference is null");
    return ;
  } 
  arg5 = *(short **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "short & reference is null");
    return ;
  } 
  arg6 = *(short **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "short & reference is null");
    return ;
  } 
  arg7 = *(short **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "short & reference is null");
    return ;
  } 
  (arg1)->pidGains(*arg2,*arg3,*arg4,*arg5,*arg6,*arg7);
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Motor_1freeze(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Motor *arg1 = (Motor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Motor **)&jarg1; 
  (arg1)->freeze();
}


SWIGEXPORT jboolean JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Motor_1isMotorDone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Motor *arg1 = (Motor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Motor **)&jarg1; 
  result = (bool)((Motor const *)arg1)->isMotorDone();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Motor_1blockMotorDone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Motor *arg1 = (Motor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Motor **)&jarg1; 
  ((Motor const *)arg1)->blockMotorDone();
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Motor_1forward(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Motor *arg1 = (Motor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Motor **)&jarg1; 
  (arg1)->forward();
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Motor_1backward(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Motor *arg1 = (Motor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Motor **)&jarg1; 
  (arg1)->backward();
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Motor_1motor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Motor *arg1 = (Motor *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Motor **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->motor(arg2);
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Motor_1off(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Motor *arg1 = (Motor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Motor **)&jarg1; 
  (arg1)->off();
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Motor_1port(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Motor *arg1 = (Motor *) 0 ;
  port_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Motor **)&jarg1; 
  result = (port_t *) &((Motor const *)arg1)->port();
  *(port_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_delete_1Motor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Motor *arg1 = (Motor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Motor **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_new_1BackEMF(JNIEnv *jenv, jclass jcls, jshort jarg1) {
  jlong jresult = 0 ;
  unsigned char *arg1 = 0 ;
  unsigned char temp1 ;
  BackEMF *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  temp1 = (unsigned char)jarg1; 
  arg1 = &temp1; 
  result = (BackEMF *)new BackEMF((unsigned char const &)*arg1);
  *(BackEMF **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_BackEMF_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BackEMF *arg1 = (BackEMF *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BackEMF **)&jarg1; 
  result = (int)((BackEMF const *)arg1)->value();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_BackEMF_1port(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  BackEMF *arg1 = (BackEMF *) 0 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BackEMF **)&jarg1; 
  result = (unsigned char)((BackEMF const *)arg1)->port();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_delete_1BackEMF(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BackEMF *arg1 = (BackEMF *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BackEMF **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_new_1Servo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  port_t arg1 ;
  port_t *argp1 ;
  Servo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(port_t **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null port_t");
    return 0;
  }
  arg1 = *argp1; 
  result = (Servo *)new Servo(arg1);
  *(Servo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Servo_1setPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Servo *arg1 = (Servo *) 0 ;
  Servo::ticks_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Servo **)&jarg1; 
  arg2 = (Servo::ticks_t)jarg2; 
  (arg1)->setPosition(arg2);
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Servo_1position(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Servo *arg1 = (Servo *) 0 ;
  Servo::ticks_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Servo **)&jarg1; 
  result = (Servo::ticks_t)((Servo const *)arg1)->position();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Servo_1disable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Servo *arg1 = (Servo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Servo **)&jarg1; 
  (arg1)->disable();
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Servo_1enable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Servo *arg1 = (Servo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Servo **)&jarg1; 
  (arg1)->enable();
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Servo_1setEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Servo *arg1 = (Servo *) 0 ;
  bool *arg2 = 0 ;
  bool temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Servo **)&jarg1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  (arg1)->setEnabled((bool const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Servo_1isEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Servo *arg1 = (Servo *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Servo **)&jarg1; 
  result = (bool)((Servo const *)arg1)->isEnabled();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_delete_1Servo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Servo *arg1 = (Servo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Servo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_new_1Analog(JNIEnv *jenv, jclass jcls, jshort jarg1) {
  jlong jresult = 0 ;
  unsigned char *arg1 = 0 ;
  unsigned char temp1 ;
  Analog *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  temp1 = (unsigned char)jarg1; 
  arg1 = &temp1; 
  result = (Analog *)new Analog((unsigned char const &)*arg1);
  *(Analog **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Analog_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Analog *arg1 = (Analog *) 0 ;
  unsigned short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Analog **)&jarg1; 
  result = (unsigned short)((Analog const *)arg1)->value();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Analog_1setPullup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Analog *arg1 = (Analog *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Analog **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setPullup(arg2);
}


SWIGEXPORT jboolean JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Analog_1pullup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Analog *arg1 = (Analog *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Analog **)&jarg1; 
  result = (bool)((Analog const *)arg1)->pullup();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Analog_1port(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  Analog *arg1 = (Analog *) 0 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Analog **)&jarg1; 
  result = (unsigned char)((Analog const *)arg1)->port();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_delete_1Analog(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Analog *arg1 = (Analog *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Analog **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_new_1Analog8(JNIEnv *jenv, jclass jcls, jshort jarg1) {
  jlong jresult = 0 ;
  unsigned char *arg1 = 0 ;
  unsigned char temp1 ;
  Analog8 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  temp1 = (unsigned char)jarg1; 
  arg1 = &temp1; 
  result = (Analog8 *)new Analog8((unsigned char const &)*arg1);
  *(Analog8 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Analog8_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Analog8 *arg1 = (Analog8 *) 0 ;
  unsigned short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Analog8 **)&jarg1; 
  result = (unsigned short)((Analog8 const *)arg1)->value();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_delete_1Analog8(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Analog8 *arg1 = (Analog8 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Analog8 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_new_1Digital(JNIEnv *jenv, jclass jcls, jshort jarg1) {
  jlong jresult = 0 ;
  unsigned char *arg1 = 0 ;
  unsigned char temp1 ;
  Digital *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  temp1 = (unsigned char)jarg1; 
  arg1 = &temp1; 
  result = (Digital *)new Digital((unsigned char const &)*arg1);
  *(Digital **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Digital_1setValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Digital *arg1 = (Digital *) 0 ;
  bool *arg2 = 0 ;
  bool temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Digital **)&jarg1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  (arg1)->setValue((bool const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Digital_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Digital *arg1 = (Digital *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Digital **)&jarg1; 
  result = (bool)((Digital const *)arg1)->value();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Digital_1setOutput(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Digital *arg1 = (Digital *) 0 ;
  bool *arg2 = 0 ;
  bool temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Digital **)&jarg1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  (arg1)->setOutput((bool const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Digital_1isOutput(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Digital *arg1 = (Digital *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Digital **)&jarg1; 
  result = (bool)((Digital const *)arg1)->isOutput();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Digital_1setPullup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Digital *arg1 = (Digital *) 0 ;
  bool *arg2 = 0 ;
  bool temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Digital **)&jarg1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  (arg1)->setPullup((bool const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Digital_1pullup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Digital *arg1 = (Digital *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Digital **)&jarg1; 
  result = (bool)((Digital const *)arg1)->pullup();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_delete_1Digital(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Digital *arg1 = (Digital *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Digital **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_delete_1AbstractButton(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AbstractButton *arg1 = (AbstractButton *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(AbstractButton **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_AbstractButton_1setPressed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  AbstractButton *arg1 = (AbstractButton *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AbstractButton **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setPressed(arg2);
}


SWIGEXPORT jboolean JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_AbstractButton_1isPressed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  AbstractButton *arg1 = (AbstractButton *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AbstractButton **)&jarg1; 
  result = (bool)((AbstractButton const *)arg1)->isPressed();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_AbstractButton_1isNotPressed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  AbstractButton *arg1 = (AbstractButton *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AbstractButton **)&jarg1; 
  result = (bool)((AbstractButton const *)arg1)->isNotPressed();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_AbstractButton_1isClicked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  AbstractButton *arg1 = (AbstractButton *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AbstractButton **)&jarg1; 
  result = (bool)((AbstractButton const *)arg1)->isClicked();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_AbstractButton_1waitUntilReleased(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  AbstractButton *arg1 = (AbstractButton *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AbstractButton **)&jarg1; 
  ((AbstractButton const *)arg1)->waitUntilReleased();
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_AbstractButton_1waitUntilPressed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  AbstractButton *arg1 = (AbstractButton *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AbstractButton **)&jarg1; 
  ((AbstractButton const *)arg1)->waitUntilPressed();
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_AbstractButton_1waitUntilClicked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  AbstractButton *arg1 = (AbstractButton *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AbstractButton **)&jarg1; 
  ((AbstractButton const *)arg1)->waitUntilClicked();
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_delete_1AbstractTextButton(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AbstractTextButton *arg1 = (AbstractTextButton *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(AbstractTextButton **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_AbstractTextButton_1setText(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  AbstractTextButton *arg1 = (AbstractTextButton *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AbstractTextButton **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->setText((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_AbstractTextButton_1text(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  AbstractTextButton *arg1 = (AbstractTextButton *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AbstractTextButton **)&jarg1; 
  result = (char *)((AbstractTextButton const *)arg1)->text();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_AbstractTextButton_1isTextDirty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  AbstractTextButton *arg1 = (AbstractTextButton *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AbstractTextButton **)&jarg1; 
  result = (bool)((AbstractTextButton const *)arg1)->isTextDirty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_AbstractTextButton_1resetText(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  AbstractTextButton *arg1 = (AbstractTextButton *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AbstractTextButton **)&jarg1; 
  (arg1)->resetText();
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_new_1IdButton(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  Button::Type::Id *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  Button::Type::Id temp1 ;
  IdButton *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  temp1 = (Button::Type::Id)jarg1; 
  arg1 = &temp1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (IdButton *)new IdButton((Button::Type::Id const &)*arg1,(char const *)arg2);
  *(IdButton **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_delete_1IdButton(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  IdButton *arg1 = (IdButton *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(IdButton **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_IdButton_1setText(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  IdButton *arg1 = (IdButton *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IdButton **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->setText((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_IdButton_1text(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  IdButton *arg1 = (IdButton *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IdButton **)&jarg1; 
  result = (char *)((IdButton const *)arg1)->text();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_IdButton_1isTextDirty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  IdButton *arg1 = (IdButton *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IdButton **)&jarg1; 
  result = (bool)((IdButton const *)arg1)->isTextDirty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_IdButton_1setPressed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  IdButton *arg1 = (IdButton *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IdButton **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setPressed(arg2);
}


SWIGEXPORT jboolean JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_IdButton_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  IdButton *arg1 = (IdButton *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IdButton **)&jarg1; 
  result = (bool)((IdButton const *)arg1)->value();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_IdButton_1resetText(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  IdButton *arg1 = (IdButton *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IdButton **)&jarg1; 
  (arg1)->resetText();
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_ExtraButtons_1show(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  ExtraButtons::show();
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_ExtraButtons_1hide(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  ExtraButtons::hide();
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_ExtraButtons_1setShown(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  bool *arg1 = 0 ;
  bool temp1 ;
  
  (void)jenv;
  (void)jcls;
  temp1 = jarg1 ? true : false; 
  arg1 = &temp1; 
  ExtraButtons::setShown((bool const &)*arg1);
}


SWIGEXPORT jboolean JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_ExtraButtons_1isShown(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)ExtraButtons::isShown();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_new_1ExtraButtons(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ExtraButtons *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ExtraButtons *)new ExtraButtons();
  *(ExtraButtons **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_delete_1ExtraButtons(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ExtraButtons *arg1 = (ExtraButtons *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ExtraButtons **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_A_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  IdButton *arg1 = (IdButton *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IdButton **)&jarg1; 
  Button::A = *arg1;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_A_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  IdButton *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (IdButton *)&Button::A;
  *(IdButton **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_B_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  IdButton *arg1 = (IdButton *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IdButton **)&jarg1; 
  Button::B = *arg1;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_B_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  IdButton *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (IdButton *)&Button::B;
  *(IdButton **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_C_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  IdButton *arg1 = (IdButton *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IdButton **)&jarg1; 
  Button::C = *arg1;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_C_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  IdButton *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (IdButton *)&Button::C;
  *(IdButton **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_X_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  IdButton *arg1 = (IdButton *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IdButton **)&jarg1; 
  Button::X = *arg1;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_X_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  IdButton *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (IdButton *)&Button::X;
  *(IdButton **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Y_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  IdButton *arg1 = (IdButton *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IdButton **)&jarg1; 
  Button::Y = *arg1;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Y_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  IdButton *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (IdButton *)&Button::Y;
  *(IdButton **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Z_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  IdButton *arg1 = (IdButton *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IdButton **)&jarg1; 
  Button::Z = *arg1;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Z_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  IdButton *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (IdButton *)&Button::Z;
  *(IdButton **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Side_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  IdButton *arg1 = (IdButton *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IdButton **)&jarg1; 
  Button::Side = *arg1;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Side_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  IdButton *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (IdButton *)&Button::Side;
  *(IdButton **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_all_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  IdButton **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (IdButton **)(IdButton **)Button::all;
  *(IdButton ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_CAMERA_1GROUP_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)("(camera)");
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_CAMERA_1NUM_1CHANNELS_1KEY_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)("(num_channels)");
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_CAMERA_1CHANNEL_1GROUP_1PREFIX_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)("(channel_)");
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_CAMERA_1CHANNEL_1TYPE_1KEY_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)("(type)");
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_CAMERA_1CHANNEL_1TYPE_1HSV_1KEY_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)("(hsv)");
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_CAMERA_1CHANNEL_1TYPE_1QR_1KEY_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)("(qr)");
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_new_1Object_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdouble jarg3, jstring jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  Point2< unsigned int > *arg1 = 0 ;
  Rect< unsigned int > *arg2 = 0 ;
  double *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  size_t *arg5 = 0 ;
  double temp3 ;
  size_t temp5 ;
  Camera::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Point2< unsigned int > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2< unsigned int > const & reference is null");
    return 0;
  } 
  arg2 = *(Rect< unsigned int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Rect< unsigned int > const & reference is null");
    return 0;
  } 
  temp3 = (double)jarg3; 
  arg3 = &temp3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  temp5 = (size_t)jarg5; 
  arg5 = &temp5; 
  result = (Camera::Object *)new Camera::Object((Point2< unsigned int > const &)*arg1,(Rect< unsigned int > const &)*arg2,(double const &)*arg3,(char const *)arg4,(size_t const &)*arg5);
  *(Camera::Object **)&jresult = result; 
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_new_1Object_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdouble jarg3, jstring jarg4) {
  jlong jresult = 0 ;
  Point2< unsigned int > *arg1 = 0 ;
  Rect< unsigned int > *arg2 = 0 ;
  double *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  double temp3 ;
  Camera::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Point2< unsigned int > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2< unsigned int > const & reference is null");
    return 0;
  } 
  arg2 = *(Rect< unsigned int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Rect< unsigned int > const & reference is null");
    return 0;
  } 
  temp3 = (double)jarg3; 
  arg3 = &temp3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  result = (Camera::Object *)new Camera::Object((Point2< unsigned int > const &)*arg1,(Rect< unsigned int > const &)*arg2,(double const &)*arg3,(char const *)arg4);
  *(Camera::Object **)&jresult = result; 
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_new_1Object_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  Point2< unsigned int > *arg1 = 0 ;
  Rect< unsigned int > *arg2 = 0 ;
  double *arg3 = 0 ;
  double temp3 ;
  Camera::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Point2< unsigned int > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2< unsigned int > const & reference is null");
    return 0;
  } 
  arg2 = *(Rect< unsigned int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Rect< unsigned int > const & reference is null");
    return 0;
  } 
  temp3 = (double)jarg3; 
  arg3 = &temp3; 
  result = (Camera::Object *)new Camera::Object((Point2< unsigned int > const &)*arg1,(Rect< unsigned int > const &)*arg2,(double const &)*arg3);
  *(Camera::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_new_1Object_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Camera::Object *arg1 = 0 ;
  Camera::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Camera::Object **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Camera::Object const & reference is null");
    return 0;
  } 
  result = (Camera::Object *)new Camera::Object((Camera::Object const &)*arg1);
  *(Camera::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_delete_1Object(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Camera::Object *arg1 = (Camera::Object *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Camera::Object **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Object_1centroid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Camera::Object *arg1 = (Camera::Object *) 0 ;
  Point2< unsigned int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Camera::Object **)&jarg1; 
  result = (Point2< unsigned int > *) &((Camera::Object const *)arg1)->centroid();
  *(Point2< unsigned int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Object_1boundingBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Camera::Object *arg1 = (Camera::Object *) 0 ;
  Rect< unsigned int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Camera::Object **)&jarg1; 
  result = (Rect< unsigned int > *) &((Camera::Object const *)arg1)->boundingBox();
  *(Rect< unsigned int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Object_1confidence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Camera::Object *arg1 = (Camera::Object *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Camera::Object **)&jarg1; 
  result = (double)((Camera::Object const *)arg1)->confidence();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Object_1data(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Camera::Object *arg1 = (Camera::Object *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Camera::Object **)&jarg1; 
  result = (char *)((Camera::Object const *)arg1)->data();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Object_1dataLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Camera::Object *arg1 = (Camera::Object *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Camera::Object **)&jarg1; 
  result = ((Camera::Object const *)arg1)->dataLength();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_delete_1ChannelImpl(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Camera::ChannelImpl *arg1 = (Camera::ChannelImpl *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Camera::ChannelImpl **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_ChannelImpl_1setImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Camera::ChannelImpl *arg1 = (Camera::ChannelImpl *) 0 ;
  cv::Mat *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Camera::ChannelImpl **)&jarg1; 
  arg2 = *(cv::Mat **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cv::Mat const & reference is null");
    return ;
  } 
  (arg1)->setImage((cv::Mat const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_ChannelImpl_1objects(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  Camera::ChannelImpl *arg1 = (Camera::ChannelImpl *) 0 ;
  Config *arg2 = 0 ;
  SwigValueWrapper< std::vector< Camera::Object > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Camera::ChannelImpl **)&jarg1; 
  arg2 = *(Config **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Config const & reference is null");
    return 0;
  } 
  result = (arg1)->objects((Config const &)*arg2);
  *(Camera::ObjectVector **)&jresult = new Camera::ObjectVector((const Camera::ObjectVector &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_delete_1ChannelImplManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Camera::ChannelImplManager *arg1 = (Camera::ChannelImplManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Camera::ChannelImplManager **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_ChannelImplManager_1setImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Camera::ChannelImplManager *arg1 = (Camera::ChannelImplManager *) 0 ;
  cv::Mat *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Camera::ChannelImplManager **)&jarg1; 
  arg2 = *(cv::Mat **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cv::Mat const & reference is null");
    return ;
  } 
  (arg1)->setImage((cv::Mat const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_ChannelImplManager_1channelImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  Camera::ChannelImplManager *arg1 = (Camera::ChannelImplManager *) 0 ;
  std::string *arg2 = 0 ;
  Camera::ChannelImpl *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Camera::ChannelImplManager **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string const & reference is null");
    return 0;
  } 
  result = (Camera::ChannelImpl *)(arg1)->channelImpl((std::string const &)*arg2);
  *(Camera::ChannelImpl **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_new_1DefaultChannelImplManager(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Camera::DefaultChannelImplManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Camera::DefaultChannelImplManager *)new Camera::DefaultChannelImplManager();
  *(Camera::DefaultChannelImplManager **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_delete_1DefaultChannelImplManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Camera::DefaultChannelImplManager *arg1 = (Camera::DefaultChannelImplManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Camera::DefaultChannelImplManager **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_DefaultChannelImplManager_1setImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Camera::DefaultChannelImplManager *arg1 = (Camera::DefaultChannelImplManager *) 0 ;
  cv::Mat *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Camera::DefaultChannelImplManager **)&jarg1; 
  arg2 = *(cv::Mat **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cv::Mat const & reference is null");
    return ;
  } 
  (arg1)->setImage((cv::Mat const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_DefaultChannelImplManager_1channelImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  Camera::DefaultChannelImplManager *arg1 = (Camera::DefaultChannelImplManager *) 0 ;
  std::string *arg2 = 0 ;
  Camera::ChannelImpl *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Camera::DefaultChannelImplManager **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string const & reference is null");
    return 0;
  } 
  result = (Camera::ChannelImpl *)(arg1)->channelImpl((std::string const &)*arg2);
  *(Camera::ChannelImpl **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_new_1Channel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  Camera::Device *arg1 = (Camera::Device *) 0 ;
  Config *arg2 = 0 ;
  Camera::Channel *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Camera::Device **)&jarg1; 
  arg2 = *(Config **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Config const & reference is null");
    return 0;
  } 
  result = (Camera::Channel *)new Camera::Channel(arg1,(Config const &)*arg2);
  *(Camera::Channel **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_delete_1Channel(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Camera::Channel *arg1 = (Camera::Channel *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Camera::Channel **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Channel_1invalidate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Camera::Channel *arg1 = (Camera::Channel *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Camera::Channel **)&jarg1; 
  (arg1)->invalidate();
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Channel_1objects(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Camera::Channel *arg1 = (Camera::Channel *) 0 ;
  Camera::ObjectVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Camera::Channel **)&jarg1; 
  result = (Camera::ObjectVector *)((Camera::Channel const *)arg1)->objects();
  *(Camera::ObjectVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Channel_1device(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Camera::Channel *arg1 = (Camera::Channel *) 0 ;
  Camera::Device *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Camera::Channel **)&jarg1; 
  result = (Camera::Device *)((Camera::Channel const *)arg1)->device();
  *(Camera::Device **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Channel_1setConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Camera::Channel *arg1 = (Camera::Channel *) 0 ;
  Config *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Camera::Channel **)&jarg1; 
  arg2 = *(Config **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Config const & reference is null");
    return ;
  } 
  (arg1)->setConfig((Config const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_ConfigPath_1extension(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  result = Camera::ConfigPath::extension();
  *(std::string **)&jresult = new std::string((const std::string &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_ConfigPath_1setBasePath(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::string *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::string **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string const & reference is null");
    return ;
  } 
  Camera::ConfigPath::setBasePath((std::string const &)*arg1);
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_ConfigPath_1path_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::string **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string const & reference is null");
    return 0;
  } 
  result = Camera::ConfigPath::path((std::string const &)*arg1);
  *(std::string **)&jresult = new std::string((const std::string &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_ConfigPath_1path_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  result = Camera::ConfigPath::path();
  *(std::string **)&jresult = new std::string((const std::string &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_ConfigPath_1defaultPath(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  result = Camera::ConfigPath::defaultPath();
  *(std::string **)&jresult = new std::string((const std::string &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_ConfigPath_1defaultConfigPath(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  result = Camera::ConfigPath::defaultConfigPath();
  *(std::string **)&jresult = new std::string((const std::string &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_ConfigPath_1setDefaultConfigPath(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::string *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::string **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string const & reference is null");
    return ;
  } 
  Camera::ConfigPath::setDefaultConfigPath((std::string const &)*arg1);
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_new_1ConfigPath(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Camera::ConfigPath *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Camera::ConfigPath *)new Camera::ConfigPath();
  *(Camera::ConfigPath **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_delete_1ConfigPath(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Camera::ConfigPath *arg1 = (Camera::ConfigPath *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Camera::ConfigPath **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_delete_1InputProvider(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Camera::InputProvider *arg1 = (Camera::InputProvider *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Camera::InputProvider **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_InputProvider_1open(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  Camera::InputProvider *arg1 = (Camera::InputProvider *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Camera::InputProvider **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->open(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_InputProvider_1isOpen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Camera::InputProvider *arg1 = (Camera::InputProvider *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Camera::InputProvider **)&jarg1; 
  result = (bool)((Camera::InputProvider const *)arg1)->isOpen();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_InputProvider_1setWidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Camera::InputProvider *arg1 = (Camera::InputProvider *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Camera::InputProvider **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->setWidth(arg2);
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_InputProvider_1setHeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Camera::InputProvider *arg1 = (Camera::InputProvider *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Camera::InputProvider **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->setHeight(arg2);
}


SWIGEXPORT jboolean JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_InputProvider_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  Camera::InputProvider *arg1 = (Camera::InputProvider *) 0 ;
  cv::Mat *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Camera::InputProvider **)&jarg1; 
  arg2 = *(cv::Mat **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cv::Mat & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->next(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_InputProvider_1close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Camera::InputProvider *arg1 = (Camera::InputProvider *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Camera::InputProvider **)&jarg1; 
  result = (bool)(arg1)->close();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_new_1UsbInputProvider(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Camera::UsbInputProvider *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Camera::UsbInputProvider *)new Camera::UsbInputProvider();
  *(Camera::UsbInputProvider **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_delete_1UsbInputProvider(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Camera::UsbInputProvider *arg1 = (Camera::UsbInputProvider *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Camera::UsbInputProvider **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_UsbInputProvider_1open(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  Camera::UsbInputProvider *arg1 = (Camera::UsbInputProvider *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Camera::UsbInputProvider **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->open(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_UsbInputProvider_1isOpen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Camera::UsbInputProvider *arg1 = (Camera::UsbInputProvider *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Camera::UsbInputProvider **)&jarg1; 
  result = (bool)((Camera::UsbInputProvider const *)arg1)->isOpen();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_UsbInputProvider_1setWidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Camera::UsbInputProvider *arg1 = (Camera::UsbInputProvider *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Camera::UsbInputProvider **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->setWidth(arg2);
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_UsbInputProvider_1setHeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Camera::UsbInputProvider *arg1 = (Camera::UsbInputProvider *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Camera::UsbInputProvider **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->setHeight(arg2);
}


SWIGEXPORT jboolean JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_UsbInputProvider_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  Camera::UsbInputProvider *arg1 = (Camera::UsbInputProvider *) 0 ;
  cv::Mat *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Camera::UsbInputProvider **)&jarg1; 
  arg2 = *(cv::Mat **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cv::Mat & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->next(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_UsbInputProvider_1close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Camera::UsbInputProvider *arg1 = (Camera::UsbInputProvider *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Camera::UsbInputProvider **)&jarg1; 
  result = (bool)(arg1)->close();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_new_1Device(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Camera::InputProvider *arg1 = (Camera::InputProvider *) (Camera::InputProvider *)0 ;
  Camera::Device *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Camera::InputProvider **)&jarg1; 
  result = (Camera::Device *)new Camera::Device(arg1);
  *(Camera::Device **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_delete_1Device(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Camera::Device *arg1 = (Camera::Device *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Camera::Device **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Device_1open_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  Camera::Device *arg1 = (Camera::Device *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Camera::Device **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->open(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Device_1open_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Camera::Device *arg1 = (Camera::Device *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Camera::Device **)&jarg1; 
  result = (bool)(arg1)->open();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Device_1isOpen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Camera::Device *arg1 = (Camera::Device *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Camera::Device **)&jarg1; 
  result = (bool)((Camera::Device const *)arg1)->isOpen();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Device_1close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Camera::Device *arg1 = (Camera::Device *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Camera::Device **)&jarg1; 
  result = (bool)(arg1)->close();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Device_1update(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Camera::Device *arg1 = (Camera::Device *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Camera::Device **)&jarg1; 
  result = (bool)(arg1)->update();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Device_1setWidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Camera::Device *arg1 = (Camera::Device *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Camera::Device **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->setWidth(arg2);
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Device_1setHeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Camera::Device *arg1 = (Camera::Device *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Camera::Device **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->setHeight(arg2);
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Device_1width(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Camera::Device *arg1 = (Camera::Device *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Camera::Device **)&jarg1; 
  result = (unsigned int)((Camera::Device const *)arg1)->width();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Device_1height(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Camera::Device *arg1 = (Camera::Device *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Camera::Device **)&jarg1; 
  result = (unsigned int)((Camera::Device const *)arg1)->height();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Device_1channels(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Camera::Device *arg1 = (Camera::Device *) 0 ;
  Camera::ChannelPtrVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Camera::Device **)&jarg1; 
  result = (Camera::ChannelPtrVector *) &((Camera::Device const *)arg1)->channels();
  *(Camera::ChannelPtrVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Device_1inputProvider(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Camera::Device *arg1 = (Camera::Device *) 0 ;
  Camera::InputProvider *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Camera::Device **)&jarg1; 
  result = (Camera::InputProvider *)((Camera::Device const *)arg1)->inputProvider();
  *(Camera::InputProvider **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Device_1rawImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Camera::Device *arg1 = (Camera::Device *) 0 ;
  cv::Mat *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Camera::Device **)&jarg1; 
  result = (cv::Mat *) &((Camera::Device const *)arg1)->rawImage();
  *(cv::Mat **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Device_1setConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Camera::Device *arg1 = (Camera::Device *) 0 ;
  Config *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Camera::Device **)&jarg1; 
  arg2 = *(Config **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Config const & reference is null");
    return ;
  } 
  (arg1)->setConfig((Config const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Device_1config(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Camera::Device *arg1 = (Camera::Device *) 0 ;
  Config *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Camera::Device **)&jarg1; 
  result = (Config *) &((Camera::Device const *)arg1)->config();
  *(Config **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Device_1setChannelImplManager(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Camera::Device *arg1 = (Camera::Device *) 0 ;
  Camera::ChannelImplManager *arg2 = (Camera::ChannelImplManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Camera::Device **)&jarg1; 
  arg2 = *(Camera::ChannelImplManager **)&jarg2; 
  (arg1)->setChannelImplManager(arg2);
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Device_1channelImplManager(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Camera::Device *arg1 = (Camera::Device *) 0 ;
  Camera::ChannelImplManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Camera::Device **)&jarg1; 
  result = (Camera::ChannelImplManager *)((Camera::Device const *)arg1)->channelImplManager();
  *(Camera::ChannelImplManager **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Device_1bgr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Camera::Device *arg1 = (Camera::Device *) 0 ;
  unsigned char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Camera::Device **)&jarg1; 
  result = (unsigned char *)((Camera::Device const *)arg1)->bgr();
  *(unsigned char **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_cDevice(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Camera::Device *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Camera::Device *)Camera::cDevice();
  *(Camera::Device **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Ir_1read(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  Ir::read();
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Ir_1write(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  Ir::write();
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_new_1Ir(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Ir *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Ir *)new Ir();
  *(Ir **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_delete_1Ir(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Ir *arg1 = (Ir *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Ir **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Battery_1isCharging(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)Battery::isCharging();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Battery_1powerLevel(JNIEnv *jenv, jclass jcls) {
  jfloat jresult = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  result = (float)Battery::powerLevel();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_new_1Battery(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Battery *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Battery *)new Battery();
  *(Battery **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_delete_1Battery(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Battery *arg1 = (Battery *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Battery **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jdouble JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_PI_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)(3.14159);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_new_1CreateScript_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CreateScript *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CreateScript *)new CreateScript();
  *(CreateScript **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_new_1CreateScript_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CreateScript *arg1 = 0 ;
  CreateScript *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CreateScript **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CreateScript const & reference is null");
    return 0;
  } 
  result = (CreateScript *)new CreateScript((CreateScript const &)*arg1);
  *(CreateScript **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_CreateScript_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  CreateScript *arg1 = (CreateScript *) 0 ;
  unsigned char *arg2 = 0 ;
  unsigned char temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CreateScript **)&jarg1; 
  temp2 = (unsigned char)jarg2; 
  arg2 = &temp2; 
  (arg1)->append((unsigned char const &)*arg2);
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_CreateScript_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  CreateScript *arg1 = (CreateScript *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  size_t *arg3 = 0 ;
  size_t temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CreateScript **)&jarg1; 
  arg2 = *(unsigned char **)&jarg2; 
  temp3 = (size_t)jarg3; 
  arg3 = &temp3; 
  (arg1)->append((unsigned char const *)arg2,(size_t const &)*arg3);
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_CreateScript_1append_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CreateScript *arg1 = (CreateScript *) 0 ;
  CreateScript *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CreateScript **)&jarg1; 
  arg2 = *(CreateScript **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CreateScript const & reference is null");
    return ;
  } 
  (arg1)->append((CreateScript const &)*arg2);
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_CreateScript_1remove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  CreateScript *arg1 = (CreateScript *) 0 ;
  size_t *arg2 = 0 ;
  size_t *arg3 = 0 ;
  size_t temp2 ;
  size_t temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CreateScript **)&jarg1; 
  temp2 = (size_t)jarg2; 
  arg2 = &temp2; 
  temp3 = (size_t)jarg3; 
  arg3 = &temp3; 
  (arg1)->remove((size_t const &)*arg2,(size_t const &)*arg3);
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_CreateScript_1remove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CreateScript *arg1 = (CreateScript *) 0 ;
  size_t *arg2 = 0 ;
  size_t temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CreateScript **)&jarg1; 
  temp2 = (size_t)jarg2; 
  arg2 = &temp2; 
  (arg1)->remove((size_t const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_CreateScript_1data(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CreateScript *arg1 = (CreateScript *) 0 ;
  unsigned char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CreateScript **)&jarg1; 
  result = (unsigned char *)((CreateScript const *)arg1)->data();
  *(unsigned char **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_CreateScript_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CreateScript *arg1 = (CreateScript *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CreateScript **)&jarg1; 
  result = ((CreateScript const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_CreateScript_1_1byte(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jshort jresult = 0 ;
  CreateScript *arg1 = (CreateScript *) 0 ;
  size_t *arg2 = 0 ;
  size_t temp2 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CreateScript **)&jarg1; 
  temp2 = (size_t)jarg2; 
  arg2 = &temp2; 
  result = (unsigned char)(arg1)->byte((size_t const &)*arg2);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_delete_1CreateScript(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CreateScript *arg1 = (CreateScript *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CreateScript **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_CreateState_1timestamp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CreateState *arg1 = (CreateState *) 0 ;
  timeval arg2 ;
  timeval *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CreateState **)&jarg1; 
  argp2 = *(timeval **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null timeval");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->timestamp = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_CreateState_1timestamp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CreateState *arg1 = (CreateState *) 0 ;
  timeval result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CreateState **)&jarg1; 
  result =  ((arg1)->timestamp);
  *(timeval **)&jresult = new timeval((const timeval &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_CreateState_1distance_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CreateState *arg1 = (CreateState *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CreateState **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->distance = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_CreateState_1distance_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CreateState *arg1 = (CreateState *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CreateState **)&jarg1; 
  result = (int) ((arg1)->distance);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_CreateState_1angle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CreateState *arg1 = (CreateState *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CreateState **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->angle = arg2;
}


SWIGEXPORT jint JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_CreateState_1angle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CreateState *arg1 = (CreateState *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CreateState **)&jarg1; 
  result = (int) ((arg1)->angle);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_CreateState_1radius_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  CreateState *arg1 = (CreateState *) 0 ;
  short arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CreateState **)&jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->radius = arg2;
}


SWIGEXPORT jshort JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_CreateState_1radius_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  CreateState *arg1 = (CreateState *) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CreateState **)&jarg1; 
  result = (short) ((arg1)->radius);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_CreateState_1rightVelocity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  CreateState *arg1 = (CreateState *) 0 ;
  short arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CreateState **)&jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->rightVelocity = arg2;
}


SWIGEXPORT jshort JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_CreateState_1rightVelocity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  CreateState *arg1 = (CreateState *) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CreateState **)&jarg1; 
  result = (short) ((arg1)->rightVelocity);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_CreateState_1leftVelocity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  CreateState *arg1 = (CreateState *) 0 ;
  short arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CreateState **)&jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->leftVelocity = arg2;
}


SWIGEXPORT jshort JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_CreateState_1leftVelocity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  CreateState *arg1 = (CreateState *) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CreateState **)&jarg1; 
  result = (short) ((arg1)->leftVelocity);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_new_1CreateState(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CreateState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CreateState *)new CreateState();
  *(CreateState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_delete_1CreateState(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CreateState *arg1 = (CreateState *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CreateState **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_delete_1Create(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Create *arg1 = (Create *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Create **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Create_1connect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Create *arg1 = (Create *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  result = (bool)(arg1)->connect();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Create_1disconnect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Create *arg1 = (Create *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  result = (bool)(arg1)->disconnect();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Create_1isConnected(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Create *arg1 = (Create *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  result = (bool)((Create const *)arg1)->isConnected();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Create_1setPassiveMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Create *arg1 = (Create *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  (arg1)->setPassiveMode();
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Create_1setSafeMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Create *arg1 = (Create *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  (arg1)->setSafeMode();
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Create_1setFullMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Create *arg1 = (Create *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  (arg1)->setFullMode();
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Create_1setMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Create *arg1 = (Create *) 0 ;
  Create::Mode *arg2 = 0 ;
  Create::Mode temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  temp2 = (Create::Mode)jarg2; 
  arg2 = &temp2; 
  (arg1)->setMode((Create::Mode const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Create_1mode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Create *arg1 = (Create *) 0 ;
  Create::Mode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  result = (Create::Mode)(arg1)->mode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Create_1send(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Create *arg1 = (Create *) 0 ;
  CreateScript *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Create **)&jarg1; 
  arg2 = *(CreateScript **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CreateScript const & reference is null");
    return ;
  } 
  (arg1)->send((CreateScript const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Create_1write_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  jboolean jresult = 0 ;
  Create *arg1 = (Create *) 0 ;
  unsigned char *arg2 = 0 ;
  unsigned char temp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  temp2 = (unsigned char)jarg2; 
  arg2 = &temp2; 
  result = (bool)(arg1)->write((unsigned char const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Create_1write_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  Create *arg1 = (Create *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  size_t *arg3 = 0 ;
  size_t temp3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  arg2 = *(unsigned char **)&jarg2; 
  temp3 = (size_t)jarg3; 
  arg3 = &temp3; 
  result = (bool)(arg1)->write((unsigned char const *)arg2,(size_t const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Create_1flush(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Create *arg1 = (Create *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  (arg1)->flush();
}


SWIGEXPORT jshort JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Create_1read_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  Create *arg1 = (Create *) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  result = (short)(arg1)->read();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Create_1read_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  Create *arg1 = (Create *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  size_t *arg3 = 0 ;
  size_t temp3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  arg2 = *(unsigned char **)&jarg2; 
  temp3 = (size_t)jarg3; 
  arg3 = &temp3; 
  result = (int)(arg1)->read(arg2,(size_t const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Create_1blockingRead_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  Create *arg1 = (Create *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  size_t *arg3 = 0 ;
  unsigned int arg4 ;
  size_t temp3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  arg2 = *(unsigned char **)&jarg2; 
  temp3 = (size_t)jarg3; 
  arg3 = &temp3; 
  arg4 = (unsigned int)jarg4; 
  result = (bool)(arg1)->blockingRead(arg2,(size_t const &)*arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Create_1blockingRead_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  Create *arg1 = (Create *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  size_t *arg3 = 0 ;
  size_t temp3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  arg2 = *(unsigned char **)&jarg2; 
  temp3 = (size_t)jarg3; 
  arg3 = &temp3; 
  result = (bool)(arg1)->blockingRead(arg2,(size_t const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Create_1setLeds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jboolean jarg3, jshort jarg4, jshort jarg5) {
  Create *arg1 = (Create *) 0 ;
  bool *arg2 = 0 ;
  bool *arg3 = 0 ;
  unsigned char *arg4 = 0 ;
  unsigned char *arg5 = 0 ;
  bool temp2 ;
  bool temp3 ;
  unsigned char temp4 ;
  unsigned char temp5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  temp3 = jarg3 ? true : false; 
  arg3 = &temp3; 
  temp4 = (unsigned char)jarg4; 
  arg4 = &temp4; 
  temp5 = (unsigned char)jarg5; 
  arg5 = &temp5; 
  (arg1)->setLeds((bool const &)*arg2,(bool const &)*arg3,(unsigned char const &)*arg4,(unsigned char const &)*arg5);
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Create_1drive(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jshort jarg3) {
  Create *arg1 = (Create *) 0 ;
  short *arg2 = 0 ;
  short *arg3 = 0 ;
  short temp2 ;
  short temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  temp2 = (short)jarg2; 
  arg2 = &temp2; 
  temp3 = (short)jarg3; 
  arg3 = &temp3; 
  (arg1)->drive((short const &)*arg2,(short const &)*arg3);
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Create_1driveDirect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jshort jarg3) {
  Create *arg1 = (Create *) 0 ;
  short *arg2 = 0 ;
  short *arg3 = 0 ;
  short temp2 ;
  short temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  temp2 = (short)jarg2; 
  arg2 = &temp2; 
  temp3 = (short)jarg3; 
  arg3 = &temp3; 
  (arg1)->driveDirect((short const &)*arg2,(short const &)*arg3);
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Create_1driveStraight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  Create *arg1 = (Create *) 0 ;
  short *arg2 = 0 ;
  short temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  temp2 = (short)jarg2; 
  arg2 = &temp2; 
  (arg1)->driveStraight((short const &)*arg2);
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Create_1stop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Create *arg1 = (Create *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  (arg1)->stop();
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Create_1turn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jint jarg3) {
  Create *arg1 = (Create *) 0 ;
  short *arg2 = 0 ;
  unsigned short *arg3 = 0 ;
  short temp2 ;
  unsigned short temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  temp2 = (short)jarg2; 
  arg2 = &temp2; 
  temp3 = (unsigned short)jarg3; 
  arg3 = &temp3; 
  (arg1)->turn((short const &)*arg2,(unsigned short const &)*arg3);
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Create_1move(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jint jarg3) {
  Create *arg1 = (Create *) 0 ;
  short *arg2 = 0 ;
  unsigned short *arg3 = 0 ;
  short temp2 ;
  unsigned short temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  temp2 = (short)jarg2; 
  arg2 = &temp2; 
  temp3 = (unsigned short)jarg3; 
  arg3 = &temp3; 
  (arg1)->move((short const &)*arg2,(unsigned short const &)*arg3);
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Create_1spin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  Create *arg1 = (Create *) 0 ;
  short *arg2 = 0 ;
  short temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  temp2 = (short)jarg2; 
  arg2 = &temp2; 
  (arg1)->spin((short const &)*arg2);
}


SWIGEXPORT jshort JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Create_1angularVelocity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  Create *arg1 = (Create *) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  result = (short)((Create const *)arg1)->angularVelocity();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Create_1spinClockwise(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  Create *arg1 = (Create *) 0 ;
  short *arg2 = 0 ;
  short temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  temp2 = (short)jarg2; 
  arg2 = &temp2; 
  (arg1)->spinClockwise((short const &)*arg2);
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Create_1spinCounterClockwise(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  Create *arg1 = (Create *) 0 ;
  short *arg2 = 0 ;
  short temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  temp2 = (short)jarg2; 
  arg2 = &temp2; 
  (arg1)->spinCounterClockwise((short const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Create_1setBaudRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  jboolean jresult = 0 ;
  Create *arg1 = (Create *) 0 ;
  unsigned char *arg2 = 0 ;
  unsigned char temp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  temp2 = (unsigned char)jarg2; 
  arg2 = &temp2; 
  result = (bool)(arg1)->setBaudRate((unsigned char const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Create_1setDistance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Create *arg1 = (Create *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setDistance(arg2);
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Create_1setAngle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Create *arg1 = (Create *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setAngle(arg2);
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Create_1playButton(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Create *arg1 = (Create *) 0 ;
  AbstractButton *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  result = (AbstractButton *)((Create const *)arg1)->playButton();
  *(AbstractButton **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Create_1advanceButton(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Create *arg1 = (Create *) 0 ;
  AbstractButton *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  result = (AbstractButton *)((Create const *)arg1)->advanceButton();
  *(AbstractButton **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Create_1wall(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Create *arg1 = (Create *) 0 ;
  Sensor< bool > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  result = (Sensor< bool > *)((Create const *)arg1)->wall();
  *(Sensor< bool > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Create_1cliffLeft(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Create *arg1 = (Create *) 0 ;
  Sensor< bool > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  result = (Sensor< bool > *)((Create const *)arg1)->cliffLeft();
  *(Sensor< bool > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Create_1cliffFrontLeft(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Create *arg1 = (Create *) 0 ;
  Sensor< bool > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  result = (Sensor< bool > *)((Create const *)arg1)->cliffFrontLeft();
  *(Sensor< bool > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Create_1cliffFrontRight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Create *arg1 = (Create *) 0 ;
  Sensor< bool > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  result = (Sensor< bool > *)((Create const *)arg1)->cliffFrontRight();
  *(Sensor< bool > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Create_1cliffRight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Create *arg1 = (Create *) 0 ;
  Sensor< bool > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  result = (Sensor< bool > *)((Create const *)arg1)->cliffRight();
  *(Sensor< bool > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Create_1virtualWall(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Create *arg1 = (Create *) 0 ;
  Sensor< bool > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  result = (Sensor< bool > *)((Create const *)arg1)->virtualWall();
  *(Sensor< bool > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Create_1wallSignal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Create *arg1 = (Create *) 0 ;
  Sensor< unsigned short > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  result = (Sensor< unsigned short > *)((Create const *)arg1)->wallSignal();
  *(Sensor< unsigned short > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Create_1cliffLeftSignal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Create *arg1 = (Create *) 0 ;
  Sensor< unsigned short > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  result = (Sensor< unsigned short > *)((Create const *)arg1)->cliffLeftSignal();
  *(Sensor< unsigned short > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Create_1cliffFrontLeftSignal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Create *arg1 = (Create *) 0 ;
  Sensor< unsigned short > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  result = (Sensor< unsigned short > *)((Create const *)arg1)->cliffFrontLeftSignal();
  *(Sensor< unsigned short > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Create_1cliffFrontRightSignal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Create *arg1 = (Create *) 0 ;
  Sensor< unsigned short > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  result = (Sensor< unsigned short > *)((Create const *)arg1)->cliffFrontRightSignal();
  *(Sensor< unsigned short > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Create_1cliffRightSignal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Create *arg1 = (Create *) 0 ;
  Sensor< unsigned short > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  result = (Sensor< unsigned short > *)((Create const *)arg1)->cliffRightSignal();
  *(Sensor< unsigned short > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Create_1cargoBayAnalogSignal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Create *arg1 = (Create *) 0 ;
  Sensor< unsigned short > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  result = (Sensor< unsigned short > *)((Create const *)arg1)->cargoBayAnalogSignal();
  *(Sensor< unsigned short > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Create_1cargoBayDigitalInputs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Create *arg1 = (Create *) 0 ;
  Sensor< unsigned char > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  result = (Sensor< unsigned char > *)((Create const *)arg1)->cargoBayDigitalInputs();
  *(Sensor< unsigned char > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Create_1ir(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Create *arg1 = (Create *) 0 ;
  Sensor< unsigned char > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  result = (Sensor< unsigned char > *)((Create const *)arg1)->ir();
  *(Sensor< unsigned char > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Create_1chargingState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Create *arg1 = (Create *) 0 ;
  Sensor< unsigned char > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  result = (Sensor< unsigned char > *)((Create const *)arg1)->chargingState();
  *(Sensor< unsigned char > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Create_1batteryTemperature(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Create *arg1 = (Create *) 0 ;
  Sensor< char > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  result = (Sensor< char > *)((Create const *)arg1)->batteryTemperature();
  *(Sensor< char > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Create_1batteryCharge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Create *arg1 = (Create *) 0 ;
  Sensor< unsigned short > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  result = (Sensor< unsigned short > *)((Create const *)arg1)->batteryCharge();
  *(Sensor< unsigned short > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Create_1batteryCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Create *arg1 = (Create *) 0 ;
  Sensor< unsigned short > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  result = (Sensor< unsigned short > *)((Create const *)arg1)->batteryCapacity();
  *(Sensor< unsigned short > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Create_1angle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Create *arg1 = (Create *) 0 ;
  Sensor< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  result = (Sensor< int > *)((Create const *)arg1)->angle();
  *(Sensor< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Create_1distance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Create *arg1 = (Create *) 0 ;
  Sensor< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  result = (Sensor< int > *)((Create const *)arg1)->distance();
  *(Sensor< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Create_1bumpLeft(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Create *arg1 = (Create *) 0 ;
  Sensor< bool > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  result = (Sensor< bool > *)((Create const *)arg1)->bumpLeft();
  *(Sensor< bool > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Create_1bumpRight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Create *arg1 = (Create *) 0 ;
  Sensor< bool > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  result = (Sensor< bool > *)((Create const *)arg1)->bumpRight();
  *(Sensor< bool > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Create_1wheelDropLeft(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Create *arg1 = (Create *) 0 ;
  Sensor< bool > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  result = (Sensor< bool > *)((Create const *)arg1)->wheelDropLeft();
  *(Sensor< bool > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Create_1wheelDropRight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Create *arg1 = (Create *) 0 ;
  Sensor< bool > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  result = (Sensor< bool > *)((Create const *)arg1)->wheelDropRight();
  *(Sensor< bool > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Create_1wheelDropCaster(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Create *arg1 = (Create *) 0 ;
  Sensor< bool > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  result = (Sensor< bool > *)((Create const *)arg1)->wheelDropCaster();
  *(Sensor< bool > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Create_1setRefreshRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Create *arg1 = (Create *) 0 ;
  unsigned short *arg2 = 0 ;
  unsigned short temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  temp2 = (unsigned short)jarg2; 
  arg2 = &temp2; 
  (arg1)->setRefreshRate((unsigned short const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Create_1refreshRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Create *arg1 = (Create *) 0 ;
  unsigned short *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  result = (unsigned short *) &((Create const *)arg1)->refreshRate();
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Create_1instance(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Create *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Create *)Create::instance();
  *(Create **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Create_1state(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Create *arg1 = (Create *) 0 ;
  CreateState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Create **)&jarg1; 
  result = (CreateState *)(arg1)->state();
  *(CreateState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Console_1clear(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  Console::clear();
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_new_1Console(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Console *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Console *)new Console();
  *(Console **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_delete_1Console(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Console *arg1 = (Console *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Console **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Category_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Category *arg1 = (Category *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Category **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string const & reference is null");
    return ;
  } 
  (arg1)->append((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Category_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Category *arg1 = (Category *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Category **)&jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  (arg1)->append((double const &)*arg2);
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Category_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Category *arg1 = (Category *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Category **)&jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  (arg1)->remove((unsigned int const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Category_1entries(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Category *arg1 = (Category *) 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Category **)&jarg1; 
  result = (std::vector< std::string > *) &((Category const *)arg1)->entries();
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Category_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Category *arg1 = (Category *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Category **)&jarg1; 
  result = (std::string *) &((Category const *)arg1)->name();
  *(std::string **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_delete_1Category(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Category *arg1 = (Category *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Category **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_delete_1DataLogWriter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  DataLogWriter *arg1 = (DataLogWriter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataLogWriter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_DataLogWriter_1write(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  DataLogWriter *arg1 = (DataLogWriter *) 0 ;
  DataLog *arg2 = (DataLog *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DataLogWriter **)&jarg1; 
  arg2 = *(DataLog **)&jarg2; 
  result = (bool)(arg1)->write((DataLog const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_new_1CsvWriter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  CsvWriter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::string **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string const & reference is null");
    return 0;
  } 
  result = (CsvWriter *)new CsvWriter((std::string const &)*arg1);
  *(CsvWriter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_CsvWriter_1write(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  CsvWriter *arg1 = (CsvWriter *) 0 ;
  DataLog *arg2 = (DataLog *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CsvWriter **)&jarg1; 
  arg2 = *(DataLog **)&jarg2; 
  result = (bool)(arg1)->write((DataLog const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_delete_1CsvWriter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CsvWriter *arg1 = (CsvWriter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CsvWriter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_new_1PlainWriter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  PlainWriter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::string **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string const & reference is null");
    return 0;
  } 
  result = (PlainWriter *)new PlainWriter((std::string const &)*arg1);
  *(PlainWriter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_PlainWriter_1write(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  PlainWriter *arg1 = (PlainWriter *) 0 ;
  DataLog *arg2 = (DataLog *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(PlainWriter **)&jarg1; 
  arg2 = *(DataLog **)&jarg2; 
  result = (bool)(arg1)->write((DataLog const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_delete_1PlainWriter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  PlainWriter *arg1 = (PlainWriter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(PlainWriter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_delete_1DataLog(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  DataLog *arg1 = (DataLog *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataLog **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_DataLog_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  DataLog *arg1 = (DataLog *) 0 ;
  std::string *arg2 = 0 ;
  Category *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataLog **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string const & reference is null");
    return 0;
  } 
  result = (Category *)(arg1)->category((std::string const &)*arg2);
  *(Category **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_DataLog_1removeCategory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  DataLog *arg1 = (DataLog *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataLog **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string const & reference is null");
    return ;
  } 
  (arg1)->removeCategory((std::string const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_DataLog_1categories(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DataLog *arg1 = (DataLog *) 0 ;
  SwigValueWrapper< std::vector< Category * > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataLog **)&jarg1; 
  result = ((DataLog const *)arg1)->categories();
  *(std::vector< Category * > **)&jresult = new std::vector< Category * >((const std::vector< Category * > &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_DataLog_1write(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  DataLog *arg1 = (DataLog *) 0 ;
  DataLogWriter *arg2 = (DataLogWriter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DataLog **)&jarg1; 
  arg2 = *(DataLogWriter **)&jarg2; 
  result = (bool)((DataLog const *)arg1)->write(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_DataLog_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  DataLog *arg1 = (DataLog *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataLog **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_new_1DataLog(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  DataLog *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (DataLog *)new DataLog();
  *(DataLog **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Acceleration_1x(JNIEnv *jenv, jclass jcls) {
  jshort jresult = 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  result = (short)Acceleration::x();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Acceleration_1y(JNIEnv *jenv, jclass jcls) {
  jshort jresult = 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  result = (short)Acceleration::y();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Acceleration_1z(JNIEnv *jenv, jclass jcls) {
  jshort jresult = 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  result = (short)Acceleration::z();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Acceleration_1calibrate(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)Acceleration::calibrate();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_new_1Acceleration(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Acceleration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Acceleration *)new Acceleration();
  *(Acceleration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_delete_1Acceleration(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Acceleration *arg1 = (Acceleration *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Acceleration **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jshort JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_AccelX_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  AccelX *arg1 = (AccelX *) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AccelX **)&jarg1; 
  result = (short)((AccelX const *)arg1)->value();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_new_1AccelX(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  AccelX *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (AccelX *)new AccelX();
  *(AccelX **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_delete_1AccelX(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AccelX *arg1 = (AccelX *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(AccelX **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jshort JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_AccelY_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  AccelY *arg1 = (AccelY *) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AccelY **)&jarg1; 
  result = (short)((AccelY const *)arg1)->value();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_new_1AccelY(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  AccelY *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (AccelY *)new AccelY();
  *(AccelY **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_delete_1AccelY(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AccelY *arg1 = (AccelY *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(AccelY **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jshort JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_AccelZ_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  AccelZ *arg1 = (AccelZ *) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AccelZ **)&jarg1; 
  result = (short)((AccelZ const *)arg1)->value();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_new_1AccelZ(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  AccelZ *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (AccelZ *)new AccelZ();
  *(AccelZ **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_delete_1AccelZ(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AccelZ *arg1 = (AccelZ *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(AccelZ **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_BackEMF_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Sensor< int > **)&baseptr = *(BackEMF **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Analog_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Sensor< unsigned short > **)&baseptr = *(Analog **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Analog8_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Analog **)&baseptr = *(Analog8 **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_Digital_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Sensor< bool > **)&baseptr = *(Digital **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_AbstractButton_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Sensor< bool > **)&baseptr = *(AbstractButton **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_AbstractTextButton_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(AbstractButton **)&baseptr = *(AbstractTextButton **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_IdButton_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(AbstractTextButton **)&baseptr = *(IdButton **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_DefaultChannelImplManager_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Camera::ChannelImplManager **)&baseptr = *(Camera::DefaultChannelImplManager **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_UsbInputProvider_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Camera::InputProvider **)&baseptr = *(Camera::UsbInputProvider **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_CsvWriter_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(DataLogWriter **)&baseptr = *(CsvWriter **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_PlainWriter_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(DataLogWriter **)&baseptr = *(PlainWriter **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_AccelX_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Sensor< short > **)&baseptr = *(AccelX **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_AccelY_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Sensor< short > **)&baseptr = *(AccelY **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_libkovan_LinkJVMJNI_AccelZ_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Sensor< short > **)&baseptr = *(AccelZ **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

