/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13




	#include "include/kovan/geom.hpp"
	#include "include/kovan/color.hpp"
	#include "include/kovan/config.hpp"
	#include <cstring>
    #include <string>
    #include <vector>
    #include <map>
    #include <iostream>
    #include <time.h>
    #include <winsock2.h>


#include <stdexcept>


#include <string>


#include <vector>
#include <stdexcept>


#include <map>
#include <algorithm>
#include <stdexcept>


SWIGINTERN void SWIG_JavaException(JNIEnv *jenv, int code, const char *msg) {
  SWIG_JavaExceptionCodes exception_code = SWIG_JavaUnknownError;
  switch(code) {
  case SWIG_MemoryError:
    exception_code = SWIG_JavaOutOfMemoryError;
    break;
  case SWIG_IOError:
    exception_code = SWIG_JavaIOException;
    break;
  case SWIG_SystemError:
  case SWIG_RuntimeError:
    exception_code = SWIG_JavaRuntimeException;
    break;
  case SWIG_OverflowError:
  case SWIG_IndexError:
    exception_code = SWIG_JavaIndexOutOfBoundsException;
    break;
  case SWIG_DivisionByZero:
    exception_code = SWIG_JavaArithmeticException;
    break;
  case SWIG_SyntaxError:
  case SWIG_ValueError:
  case SWIG_TypeError:
    exception_code = SWIG_JavaIllegalArgumentException;
    break;
  case SWIG_UnknownError:
  default:
    exception_code = SWIG_JavaUnknownError;
    break;
  }
  SWIG_JavaThrowException(jenv, exception_code, msg);
}


#include <stdexcept>


#include <utility>

SWIGINTERN Camera::std::vector< Camera::Channel * >::const_reference std_vector_Sl_Camera_Channel_Sm__Sg__get(std::vector< Camera::Channel * > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_Camera_Channel_Sm__Sg__set(std::vector< Camera::Channel * > *self,int i,Camera::std::vector< Camera::Channel * >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jstring JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_CAMERA_1GROUP_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)("(camera)");
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_CAMERA_1NUM_1CHANNELS_1KEY_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)("(num_channels)");
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_CAMERA_1CHANNEL_1GROUP_1PREFIX_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)("(channel_)");
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_CAMERA_1CHANNEL_1TYPE_1KEY_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)("(type)");
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_CAMERA_1CHANNEL_1TYPE_1HSV_1KEY_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)("(hsv)");
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_CAMERA_1CHANNEL_1TYPE_1QR_1KEY_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)("(qr)");
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_new_1Object_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdouble jarg3, jstring jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  Point2< unsigned int > *arg1 = 0 ;
  Rect< unsigned int > *arg2 = 0 ;
  double *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  size_t *arg5 = 0 ;
  double temp3 ;
  size_t temp5 ;
  Camera::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Point2< unsigned int > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2< unsigned int > const & reference is null");
    return 0;
  } 
  arg2 = *(Rect< unsigned int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Rect< unsigned int > const & reference is null");
    return 0;
  } 
  temp3 = (double)jarg3; 
  arg3 = &temp3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  temp5 = (size_t)jarg5; 
  arg5 = &temp5; 
  result = (Camera::Object *)new Camera::Object((Point2< unsigned int > const &)*arg1,(Rect< unsigned int > const &)*arg2,(double const &)*arg3,(char const *)arg4,(size_t const &)*arg5);
  *(Camera::Object **)&jresult = result; 
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_new_1Object_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdouble jarg3, jstring jarg4) {
  jlong jresult = 0 ;
  Point2< unsigned int > *arg1 = 0 ;
  Rect< unsigned int > *arg2 = 0 ;
  double *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  double temp3 ;
  Camera::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Point2< unsigned int > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2< unsigned int > const & reference is null");
    return 0;
  } 
  arg2 = *(Rect< unsigned int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Rect< unsigned int > const & reference is null");
    return 0;
  } 
  temp3 = (double)jarg3; 
  arg3 = &temp3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  result = (Camera::Object *)new Camera::Object((Point2< unsigned int > const &)*arg1,(Rect< unsigned int > const &)*arg2,(double const &)*arg3,(char const *)arg4);
  *(Camera::Object **)&jresult = result; 
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_new_1Object_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  Point2< unsigned int > *arg1 = 0 ;
  Rect< unsigned int > *arg2 = 0 ;
  double *arg3 = 0 ;
  double temp3 ;
  Camera::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Point2< unsigned int > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2< unsigned int > const & reference is null");
    return 0;
  } 
  arg2 = *(Rect< unsigned int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Rect< unsigned int > const & reference is null");
    return 0;
  } 
  temp3 = (double)jarg3; 
  arg3 = &temp3; 
  result = (Camera::Object *)new Camera::Object((Point2< unsigned int > const &)*arg1,(Rect< unsigned int > const &)*arg2,(double const &)*arg3);
  *(Camera::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_new_1Object_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Camera::Object *arg1 = 0 ;
  Camera::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Camera::Object **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Camera::Object const & reference is null");
    return 0;
  } 
  result = (Camera::Object *)new Camera::Object((Camera::Object const &)*arg1);
  *(Camera::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_delete_1Object(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Camera::Object *arg1 = (Camera::Object *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Camera::Object **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_Object_1centroid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Camera::Object *arg1 = (Camera::Object *) 0 ;
  Point2< unsigned int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Camera::Object **)&jarg1; 
  result = (Point2< unsigned int > *) &((Camera::Object const *)arg1)->centroid();
  *(Point2< unsigned int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_Object_1boundingBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Camera::Object *arg1 = (Camera::Object *) 0 ;
  Rect< unsigned int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Camera::Object **)&jarg1; 
  result = (Rect< unsigned int > *) &((Camera::Object const *)arg1)->boundingBox();
  *(Rect< unsigned int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_Object_1confidence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Camera::Object *arg1 = (Camera::Object *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Camera::Object **)&jarg1; 
  result = (double)((Camera::Object const *)arg1)->confidence();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_Object_1data(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Camera::Object *arg1 = (Camera::Object *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Camera::Object **)&jarg1; 
  result = (char *)((Camera::Object const *)arg1)->data();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_Object_1dataLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Camera::Object *arg1 = (Camera::Object *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Camera::Object **)&jarg1; 
  result = ((Camera::Object const *)arg1)->dataLength();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_delete_1ChannelImpl(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Camera::ChannelImpl *arg1 = (Camera::ChannelImpl *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Camera::ChannelImpl **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_ChannelImpl_1setImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Camera::ChannelImpl *arg1 = (Camera::ChannelImpl *) 0 ;
  cv::Mat *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Camera::ChannelImpl **)&jarg1; 
  arg2 = *(cv::Mat **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cv::Mat const & reference is null");
    return ;
  } 
  (arg1)->setImage((cv::Mat const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_ChannelImpl_1objects(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Camera::ChannelImpl *arg1 = (Camera::ChannelImpl *) 0 ;
  Config *arg2 = 0 ;
  SwigValueWrapper< std::vector< Camera::Object > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Camera::ChannelImpl **)&jarg1; 
  arg2 = *(Config **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Config const & reference is null");
    return 0;
  } 
  result = (arg1)->objects((Config const &)*arg2);
  *(Camera::ObjectVector **)&jresult = new Camera::ObjectVector((const Camera::ObjectVector &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_delete_1ChannelImplManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Camera::ChannelImplManager *arg1 = (Camera::ChannelImplManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Camera::ChannelImplManager **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_ChannelImplManager_1setImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Camera::ChannelImplManager *arg1 = (Camera::ChannelImplManager *) 0 ;
  cv::Mat *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Camera::ChannelImplManager **)&jarg1; 
  arg2 = *(cv::Mat **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cv::Mat const & reference is null");
    return ;
  } 
  (arg1)->setImage((cv::Mat const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_ChannelImplManager_1channelImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Camera::ChannelImplManager *arg1 = (Camera::ChannelImplManager *) 0 ;
  std::string *arg2 = 0 ;
  Camera::ChannelImpl *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Camera::ChannelImplManager **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (Camera::ChannelImpl *)(arg1)->channelImpl((std::string const &)*arg2);
  *(Camera::ChannelImpl **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_new_1DefaultChannelImplManager(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Camera::DefaultChannelImplManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Camera::DefaultChannelImplManager *)new Camera::DefaultChannelImplManager();
  *(Camera::DefaultChannelImplManager **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_delete_1DefaultChannelImplManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Camera::DefaultChannelImplManager *arg1 = (Camera::DefaultChannelImplManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Camera::DefaultChannelImplManager **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_DefaultChannelImplManager_1setImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Camera::DefaultChannelImplManager *arg1 = (Camera::DefaultChannelImplManager *) 0 ;
  cv::Mat *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Camera::DefaultChannelImplManager **)&jarg1; 
  arg2 = *(cv::Mat **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cv::Mat const & reference is null");
    return ;
  } 
  (arg1)->setImage((cv::Mat const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_DefaultChannelImplManager_1channelImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Camera::DefaultChannelImplManager *arg1 = (Camera::DefaultChannelImplManager *) 0 ;
  std::string *arg2 = 0 ;
  Camera::ChannelImpl *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Camera::DefaultChannelImplManager **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (Camera::ChannelImpl *)(arg1)->channelImpl((std::string const &)*arg2);
  *(Camera::ChannelImpl **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_new_1Channel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Camera::Device *arg1 = (Camera::Device *) 0 ;
  Config *arg2 = 0 ;
  Camera::Channel *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Camera::Device **)&jarg1; 
  arg2 = *(Config **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Config const & reference is null");
    return 0;
  } 
  result = (Camera::Channel *)new Camera::Channel(arg1,(Config const &)*arg2);
  *(Camera::Channel **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_delete_1Channel(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Camera::Channel *arg1 = (Camera::Channel *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Camera::Channel **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_Channel_1invalidate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Camera::Channel *arg1 = (Camera::Channel *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Camera::Channel **)&jarg1; 
  (arg1)->invalidate();
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_Channel_1objects(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Camera::Channel *arg1 = (Camera::Channel *) 0 ;
  Camera::ObjectVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Camera::Channel **)&jarg1; 
  result = (Camera::ObjectVector *)((Camera::Channel const *)arg1)->objects();
  *(Camera::ObjectVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_Channel_1device(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Camera::Channel *arg1 = (Camera::Channel *) 0 ;
  Camera::Device *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Camera::Channel **)&jarg1; 
  result = (Camera::Device *)((Camera::Channel const *)arg1)->device();
  *(Camera::Device **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_Channel_1setConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Camera::Channel *arg1 = (Camera::Channel *) 0 ;
  Config *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Camera::Channel **)&jarg1; 
  arg2 = *(Config **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Config const & reference is null");
    return ;
  } 
  (arg1)->setConfig((Config const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_ConfigPath_1extension(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  result = Camera::ConfigPath::extension();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_ConfigPath_1setBasePath(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  std::string *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  Camera::ConfigPath::setBasePath((std::string const &)*arg1);
}


SWIGEXPORT jstring JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_ConfigPath_1path_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jstring jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = Camera::ConfigPath::path((std::string const &)*arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_ConfigPath_1path_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  result = Camera::ConfigPath::path();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_ConfigPath_1defaultPath(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  result = Camera::ConfigPath::defaultPath();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_ConfigPath_1defaultConfigPath(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  result = Camera::ConfigPath::defaultConfigPath();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_ConfigPath_1setDefaultConfigPath(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  std::string *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  Camera::ConfigPath::setDefaultConfigPath((std::string const &)*arg1);
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_new_1ConfigPath(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Camera::ConfigPath *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Camera::ConfigPath *)new Camera::ConfigPath();
  *(Camera::ConfigPath **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_delete_1ConfigPath(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Camera::ConfigPath *arg1 = (Camera::ConfigPath *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Camera::ConfigPath **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_delete_1InputProvider(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Camera::InputProvider *arg1 = (Camera::InputProvider *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Camera::InputProvider **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_InputProvider_1open(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  Camera::InputProvider *arg1 = (Camera::InputProvider *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Camera::InputProvider **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->open(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_InputProvider_1isOpen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Camera::InputProvider *arg1 = (Camera::InputProvider *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Camera::InputProvider **)&jarg1; 
  result = (bool)((Camera::InputProvider const *)arg1)->isOpen();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_InputProvider_1setWidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Camera::InputProvider *arg1 = (Camera::InputProvider *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Camera::InputProvider **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->setWidth(arg2);
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_InputProvider_1setHeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Camera::InputProvider *arg1 = (Camera::InputProvider *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Camera::InputProvider **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->setHeight(arg2);
}


SWIGEXPORT jboolean JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_InputProvider_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  Camera::InputProvider *arg1 = (Camera::InputProvider *) 0 ;
  cv::Mat *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Camera::InputProvider **)&jarg1; 
  arg2 = *(cv::Mat **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cv::Mat & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->next(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_InputProvider_1close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Camera::InputProvider *arg1 = (Camera::InputProvider *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Camera::InputProvider **)&jarg1; 
  result = (bool)(arg1)->close();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_new_1UsbInputProvider(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Camera::UsbInputProvider *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Camera::UsbInputProvider *)new Camera::UsbInputProvider();
  *(Camera::UsbInputProvider **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_delete_1UsbInputProvider(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Camera::UsbInputProvider *arg1 = (Camera::UsbInputProvider *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Camera::UsbInputProvider **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_UsbInputProvider_1open(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  Camera::UsbInputProvider *arg1 = (Camera::UsbInputProvider *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Camera::UsbInputProvider **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->open(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_UsbInputProvider_1isOpen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Camera::UsbInputProvider *arg1 = (Camera::UsbInputProvider *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Camera::UsbInputProvider **)&jarg1; 
  result = (bool)((Camera::UsbInputProvider const *)arg1)->isOpen();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_UsbInputProvider_1setWidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Camera::UsbInputProvider *arg1 = (Camera::UsbInputProvider *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Camera::UsbInputProvider **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->setWidth(arg2);
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_UsbInputProvider_1setHeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Camera::UsbInputProvider *arg1 = (Camera::UsbInputProvider *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Camera::UsbInputProvider **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->setHeight(arg2);
}


SWIGEXPORT jboolean JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_UsbInputProvider_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  Camera::UsbInputProvider *arg1 = (Camera::UsbInputProvider *) 0 ;
  cv::Mat *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Camera::UsbInputProvider **)&jarg1; 
  arg2 = *(cv::Mat **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "cv::Mat & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->next(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_UsbInputProvider_1close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Camera::UsbInputProvider *arg1 = (Camera::UsbInputProvider *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Camera::UsbInputProvider **)&jarg1; 
  result = (bool)(arg1)->close();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_new_1Device(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Camera::InputProvider *arg1 = (Camera::InputProvider *) (Camera::InputProvider *)0 ;
  Camera::Device *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Camera::InputProvider **)&jarg1; 
  result = (Camera::Device *)new Camera::Device(arg1);
  *(Camera::Device **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_delete_1Device(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Camera::Device *arg1 = (Camera::Device *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Camera::Device **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_Device_1open_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  Camera::Device *arg1 = (Camera::Device *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Camera::Device **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->open(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_Device_1open_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Camera::Device *arg1 = (Camera::Device *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Camera::Device **)&jarg1; 
  result = (bool)(arg1)->open();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_Device_1isOpen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Camera::Device *arg1 = (Camera::Device *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Camera::Device **)&jarg1; 
  result = (bool)((Camera::Device const *)arg1)->isOpen();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_Device_1close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Camera::Device *arg1 = (Camera::Device *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Camera::Device **)&jarg1; 
  result = (bool)(arg1)->close();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_Device_1update(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Camera::Device *arg1 = (Camera::Device *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Camera::Device **)&jarg1; 
  result = (bool)(arg1)->update();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_Device_1setWidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Camera::Device *arg1 = (Camera::Device *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Camera::Device **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->setWidth(arg2);
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_Device_1setHeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Camera::Device *arg1 = (Camera::Device *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Camera::Device **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->setHeight(arg2);
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_Device_1width(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Camera::Device *arg1 = (Camera::Device *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Camera::Device **)&jarg1; 
  result = (unsigned int)((Camera::Device const *)arg1)->width();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_Device_1height(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Camera::Device *arg1 = (Camera::Device *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Camera::Device **)&jarg1; 
  result = (unsigned int)((Camera::Device const *)arg1)->height();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_Device_1channels(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Camera::Device *arg1 = (Camera::Device *) 0 ;
  Camera::ChannelPtrVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Camera::Device **)&jarg1; 
  result = (Camera::ChannelPtrVector *) &((Camera::Device const *)arg1)->channels();
  *(Camera::ChannelPtrVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_Device_1inputProvider(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Camera::Device *arg1 = (Camera::Device *) 0 ;
  Camera::InputProvider *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Camera::Device **)&jarg1; 
  result = (Camera::InputProvider *)((Camera::Device const *)arg1)->inputProvider();
  *(Camera::InputProvider **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_Device_1rawImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Camera::Device *arg1 = (Camera::Device *) 0 ;
  cv::Mat *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Camera::Device **)&jarg1; 
  result = (cv::Mat *) &((Camera::Device const *)arg1)->rawImage();
  *(cv::Mat **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_Device_1setConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Camera::Device *arg1 = (Camera::Device *) 0 ;
  Config *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Camera::Device **)&jarg1; 
  arg2 = *(Config **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Config const & reference is null");
    return ;
  } 
  (arg1)->setConfig((Config const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_Device_1config(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Camera::Device *arg1 = (Camera::Device *) 0 ;
  Config *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Camera::Device **)&jarg1; 
  result = (Config *) &((Camera::Device const *)arg1)->config();
  *(Config **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_Device_1setChannelImplManager(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Camera::Device *arg1 = (Camera::Device *) 0 ;
  Camera::ChannelImplManager *arg2 = (Camera::ChannelImplManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Camera::Device **)&jarg1; 
  arg2 = *(Camera::ChannelImplManager **)&jarg2; 
  (arg1)->setChannelImplManager(arg2);
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_Device_1channelImplManager(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Camera::Device *arg1 = (Camera::Device *) 0 ;
  Camera::ChannelImplManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Camera::Device **)&jarg1; 
  result = (Camera::ChannelImplManager *)((Camera::Device const *)arg1)->channelImplManager();
  *(Camera::ChannelImplManager **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_Device_1bgr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Camera::Device *arg1 = (Camera::Device *) 0 ;
  unsigned char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Camera::Device **)&jarg1; 
  result = (unsigned char *)((Camera::Device const *)arg1)->bgr();
  *(unsigned char **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_cDevice(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Camera::Device *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Camera::Device *)Camera::cDevice();
  *(Camera::Device **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_new_1ChannelVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< Camera::Channel * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< Camera::Channel * > *)new std::vector< Camera::Channel * >();
  *(std::vector< Camera::Channel * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_new_1ChannelVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  Camera::std::vector< Camera::Channel * >::size_type arg1 ;
  std::vector< Camera::Channel * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (Camera::std::vector< Camera::Channel * >::size_type)jarg1; 
  result = (std::vector< Camera::Channel * > *)new std::vector< Camera::Channel * >(arg1);
  *(std::vector< Camera::Channel * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_ChannelVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< Camera::Channel * > *arg1 = (std::vector< Camera::Channel * > *) 0 ;
  Camera::std::vector< Camera::Channel * >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Camera::Channel * > **)&jarg1; 
  result = ((std::vector< Camera::Channel * > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_ChannelVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< Camera::Channel * > *arg1 = (std::vector< Camera::Channel * > *) 0 ;
  Camera::std::vector< Camera::Channel * >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Camera::Channel * > **)&jarg1; 
  result = ((std::vector< Camera::Channel * > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_ChannelVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< Camera::Channel * > *arg1 = (std::vector< Camera::Channel * > *) 0 ;
  Camera::std::vector< Camera::Channel * >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Camera::Channel * > **)&jarg1; 
  arg2 = (Camera::std::vector< Camera::Channel * >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_ChannelVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< Camera::Channel * > *arg1 = (std::vector< Camera::Channel * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Camera::Channel * > **)&jarg1; 
  result = (bool)((std::vector< Camera::Channel * > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_ChannelVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< Camera::Channel * > *arg1 = (std::vector< Camera::Channel * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Camera::Channel * > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_ChannelVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< Camera::Channel * > *arg1 = (std::vector< Camera::Channel * > *) 0 ;
  Camera::std::vector< Camera::Channel * >::value_type *arg2 = 0 ;
  Camera::std::vector< Camera::Channel * >::value_type temp2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< Camera::Channel * > **)&jarg1; 
  temp2 = *(Camera::std::vector< Camera::Channel * >::value_type *)&jarg2;
  arg2 = (Camera::std::vector< Camera::Channel * >::value_type *)&temp2; 
  (arg1)->push_back((Camera::std::vector< Camera::Channel * >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_ChannelVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< Camera::Channel * > *arg1 = (std::vector< Camera::Channel * > *) 0 ;
  int arg2 ;
  Camera::std::vector< Camera::Channel * >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Camera::Channel * > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (Camera::std::vector< Camera::Channel * >::value_type *) &std_vector_Sl_Camera_Channel_Sm__Sg__get(arg1,arg2);
  }
  catch(Camera::std::out_of_range &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ Camera::std::out_of_range exception thrown");
    return 0; 
  }
  
  *(Camera::std::vector< Camera::Channel * >::value_type *)&jresult = *result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_ChannelVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< Camera::Channel * > *arg1 = (std::vector< Camera::Channel * > *) 0 ;
  int arg2 ;
  Camera::std::vector< Camera::Channel * >::value_type *arg3 = 0 ;
  Camera::std::vector< Camera::Channel * >::value_type temp3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< Camera::Channel * > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = *(Camera::std::vector< Camera::Channel * >::value_type *)&jarg3;
  arg3 = (Camera::std::vector< Camera::Channel * >::value_type *)&temp3; 
  try {
    std_vector_Sl_Camera_Channel_Sm__Sg__set(arg1,arg2,(Camera::Channel *const &)*arg3);
  }
  catch(Camera::std::out_of_range &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ Camera::std::out_of_range exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_delete_1ChannelVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< Camera::Channel * > *arg1 = (std::vector< Camera::Channel * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< Camera::Channel * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_DefaultChannelImplManager_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Camera::ChannelImplManager **)&baseptr = *(Camera::DefaultChannelImplManager **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_io_github_linkjvm_jni_camera_linkjvm_1cameraJNI_UsbInputProvider_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Camera::InputProvider **)&baseptr = *(Camera::UsbInputProvider **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

