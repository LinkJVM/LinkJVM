/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package io.github.linkjvm.libkovan;

public class Motor {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected Motor(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(Motor obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        LinkJVMJNI.delete_Motor(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public Motor(SWIGTYPE_p_port_t port) {
    this(LinkJVMJNI.new_Motor(SWIGTYPE_p_port_t.getCPtr(port)), true);
  }

  public void clearPositionCounter() {
    LinkJVMJNI.Motor_clearPositionCounter(swigCPtr, this);
  }

  public void moveAtVelocity(short velocity) {
    LinkJVMJNI.Motor_moveAtVelocity(swigCPtr, this, velocity);
  }

  public void moveToPosition(short speed, int goalPos) {
    LinkJVMJNI.Motor_moveToPosition(swigCPtr, this, speed, goalPos);
  }

  public void moveRelativePosition(short speed, int deltaPos) {
    LinkJVMJNI.Motor_moveRelativePosition(swigCPtr, this, speed, deltaPos);
  }

  public void setPidGains(short p, short i, short d, short pd, short id, short dd) {
    LinkJVMJNI.Motor_setPidGains(swigCPtr, this, p, i, d, pd, id, dd);
  }

  public void pidGains(SWIGTYPE_p_short p, SWIGTYPE_p_short i, SWIGTYPE_p_short d, SWIGTYPE_p_short pd, SWIGTYPE_p_short id, SWIGTYPE_p_short dd) {
    LinkJVMJNI.Motor_pidGains(swigCPtr, this, SWIGTYPE_p_short.getCPtr(p), SWIGTYPE_p_short.getCPtr(i), SWIGTYPE_p_short.getCPtr(d), SWIGTYPE_p_short.getCPtr(pd), SWIGTYPE_p_short.getCPtr(id), SWIGTYPE_p_short.getCPtr(dd));
  }

  public void freeze() {
    LinkJVMJNI.Motor_freeze(swigCPtr, this);
  }

  public boolean isMotorDone() {
    return LinkJVMJNI.Motor_isMotorDone(swigCPtr, this);
  }

  public void blockMotorDone() {
    LinkJVMJNI.Motor_blockMotorDone(swigCPtr, this);
  }

  public void forward() {
    LinkJVMJNI.Motor_forward(swigCPtr, this);
  }

  public void backward() {
    LinkJVMJNI.Motor_backward(swigCPtr, this);
  }

  public void motor(int percent) {
    LinkJVMJNI.Motor_motor(swigCPtr, this, percent);
  }

  public void off() {
    LinkJVMJNI.Motor_off(swigCPtr, this);
  }

  public SWIGTYPE_p_port_t port() {
    return new SWIGTYPE_p_port_t(LinkJVMJNI.Motor_port(swigCPtr, this), false);
  }

}
